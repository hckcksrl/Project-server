type User{
    id: Int!
    email: String!
    password: String
    project: [Project]
}
type Project{
    id: Int!
    projectName: String!
    subProject: [SubProject]
    userId: Int!
}
type SubProject{
    id: Int!
    SubProjectName: String!
    DetailList: [DetailList]
    ProjectId: Int!
}
type DetailList{
    id: Int!
    DetailName: String!
    SubProjectId: Int!
}
type Query{
    GetProject(id: Int!) : GetProjectRes
    GetSubProject(id: Int!) : GetSubProjectRes
    GetDetailList(id: Int!) : GetDetailListRes
    GetUsers(id: Int!) : GetUserRes
}
type Mutation{
    Login(email: String! , password: String!) : AuthToken!
    Regist(email: String! , password: String!) : AuthToken!
    CreateProject(projectName: String! , userId: Int!) : ProjectRes!
    EditProject(id: Int! ,projectName: String ) : ProjectRes!
    DeleteProject(id: Int!) : ProjectRes!
    CreateSubProject(SubProjectName: String! , ProjectId: Int!) : Boolean!
    EditSubProject(id: Int! , SubProjectName: String ) : Boolean! 
    DeleteSubProject(id: Int!) : Boolean!
    CreateDetailProject(DetailName: String! , SubProjectId: Int!) : Boolean!
    EditDetailProject(id: Int! , DetailName: String) : Boolean!
    DeleteDetailProject(id: Int!) : Boolean!
}
type AuthToken{
    result: Boolean!
    error : String
    token : String
}
type Boolean{
    result : Boolean!
}
type GetProjectRes {
    result: Boolean!
    error: String
    project: Project
}
type GetSubProjectRes {
    result: Boolean!
    error: String
    subproject: SubProject
}
type GetDetailListRes {
    result: Boolean!
    error: String
    detail: DetailList
}
type GetUserRes {
    result : Boolean!
    error : String
    user : User
}
type ProjectRes{
    result : Boolean!
    error : String
}